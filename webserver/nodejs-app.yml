#cloud-config

# Creator : Bloodbee
# This script intialize a new droplet with a new user, ssh access, cloning nodejs project, daemonizing it with pm2, manage dns servers
# Tested ? With algoliaextended.com and thebotagency.xyz
# Before using, replace the keyword <%...%> with your own values

#Initial server setup with a new user
users:
  - name: <%SECOND_USER_NAME%>
    groups: sudo
    shell: /bin/bash
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    ssh-authorized-keys:
      - <%SSH_PUB_KEY%>


#Packages upgrade true
package_upgrade: true

runcmd:
  # Export variable to use later
  - export SCRIPT_EMAIL=<%EMAIL%>
  - export SCRIPT_USERNAME=<%SECOND_USER_NAME%>
  - export SCRIPT_WEBSITE=<%TOP_DOMAIN_TO_USE%>
  - export SCRIPT_WEBSITE_REPO=<%REPOSITORY_GIT_TO_USE%>
  - export SCRIPT_API_TOKEN=<%DIGITAL_OCEAN_API_KEY%>
  # Get this servers public_ipv4 and droplet_id to use later
  - export SCRIPT_PUBLIC_IPV4=$(curl -s http://169.254.169.254/metadata/v1/interfaces/public/0/ipv4/address)
  - export SCRIPT_DROPLET_ID=$(curl -s http://169.254.169.254/metadata/v1/id)
  # Change to the new user
  - su - $SCRIPT_USERNAME
  # More security for ssh
  - sudo sed -i -e '/^PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config # remove the root ssh login
  - sudo sed -i -e '$aAllowUsers $SCRIPT_USERNAME' /etc/ssh/sshd_config #allow our new user to do ssh
  - sudo restart ssh
  # Install packages
  - sudo apt update -y
  - sudo apt install -y git
  - sudo curl -sL https://deb.nodesource.com/setup_8.x -o nodesource_setup.sh
  - sudo bash nodesource_setup.sh
  - sudo apt install -y nodejs
  - sudo apt install -y build-essential
  - sudo apt install -y nginx
  - sudo npm install -y pm2 -g
  - sudo add-apt-repository -y ppa:certbot/certbot
  - sudo apt install -y python-certbot-nginx
  - sudo apt autoremove -y
  - sudo curl -sSL https://agent.digitalocean.com/install.sh | sh # install monitoring agent
  # Clone repo at the good place
  - sudo mkdir -p /var/www/$SCRIPT_WEBSITE
  - sudo git clone $SCRIPT_WEBSITE_REPO /var/www/$SCRIPT_WEBSITE
  - sudo chown -R $SCRIPT_USERNAME:$SCRIPT_USERNAME /var/www/$SCRIPT_WEBSITE
  - sudo chmod -R 755 /var/www/$SCRIPT_WEBSITE
  # Configure NGINX
  - sudo mv /home/website_nginx_conf /etc/nginx/sites-available/$SCRIPT_WEBSITE
  - sudo sed -i 's/SCRIPT_DOMAIN_PLACEHOLDER/'$SCRIPT_WEBSITE\ www.$SCRIPT_WEBSITE'/' /etc/nginx/sites-available/$SCRIPT_WEBSITE
  - sudo sudo ln -s /etc/nginx/sites-available/$SCRIPT_WEBSITE /etc/nginx/sites-enabled/
  - sudo rm /etc/nginx/sites-enabled/default
  - sudo systemctl restart nginx
  # Install project packages
  - cd /var/www/$SCRIPT_WEBSITE
  - sudo npm install -y
  - sudo npm update -y
  # PM2 for managing the website process
  - cd /var/www/$SCRIPT_WEBSITE
  - sudo pm2 start npm -- start
  - sudo pm2 startup systemd
  - sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $SCRIPT_USERNAME --hp /home/$SCRIPT_USERNAME
  - sudo pm2 save
  # Create a domain and subdomain a-record for this droplet
  - 'curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $SCRIPT_API_TOKEN" -d "{\"type\":\"A\", \"name\":\"www\", \"data\":\"$SCRIPT_PUBLIC_IPV4\"}" https://api.digitalocean.com/v2/domains/$SCRIPT_WEBSITE/records'
  - 'curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $SCRIPT_API_TOKEN" -d "{\"type\":\"A\", \"name\":\"@\", \"data\":\"$SCRIPT_PUBLIC_IPV4\"}" https://api.digitalocean.com/v2/domains/$SCRIPT_WEBSITE/records'
  # Certbot for letsencrypt
  - sudo certbot --nginx -n -d $SCRIPT_WEBSITE -d www.$SCRIPT_WEBSITE --email $SCRIPT_EMAIL --agree-tos --redirect --hsts
  - sudo certbot renew --dry-run

write_files:
  - path: /etc/cron.d/letsencrypt_renew
    content: "15 3 * * * /usr/bin/certbot renew --quiet"
  - path: /home/website_nginx_conf
    content: |
      server {
        server_name SCRIPT_DOMAIN_PLACEHOLDER;
        location / {
          proxy_pass http://localhost:3000;
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection 'upgrade';
          proxy_set_header Host $host;
          proxy_cache_bypass $http_upgrade;
        }
      }
